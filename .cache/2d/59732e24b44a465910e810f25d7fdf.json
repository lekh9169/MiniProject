{"id":"node_modules/tsparticles/dist/Core/Particle/Interactions/Mouse/Grabber.js","dependencies":[{"name":"E:\\Ment-master\\package.json","includedInParent":true,"mtime":1593073115667},{"name":"E:\\Ment-master\\.babelrc","includedInParent":true,"mtime":1592712076000},{"name":"E:\\Ment-master\\node_modules\\tsparticles\\package.json","includedInParent":true,"mtime":1593073113793},{"name":"../../../../Utils","loc":{"line":4,"column":24},"parent":"E:\\Ment-master\\node_modules\\tsparticles\\dist\\Core\\Particle\\Interactions\\Mouse\\Grabber.js","resolved":"E:\\Ment-master\\node_modules\\tsparticles\\dist\\Utils\\index.js"},{"name":"../../../../Enums/Modes","loc":{"line":5,"column":24},"parent":"E:\\Ment-master\\node_modules\\tsparticles\\dist\\Core\\Particle\\Interactions\\Mouse\\Grabber.js","resolved":"E:\\Ment-master\\node_modules\\tsparticles\\dist\\Enums\\Modes\\index.js"}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Grabber = void 0;\nconst Utils_1 = require(\"../../../../Utils\");\nconst Modes_1 = require(\"../../../../Enums/Modes\");\nclass Grabber {\n    constructor(container) {\n        this.container = container;\n    }\n    isEnabled() {\n        const container = this.container;\n        const mouse = container.interactivity.mouse;\n        const events = container.options.interactivity.events;\n        if (!(events.onHover.enable && mouse.position)) {\n            return false;\n        }\n        const hoverMode = events.onHover.mode;\n        return Utils_1.Utils.isInArray(Modes_1.HoverMode.grab, hoverMode);\n    }\n    reset() {\n    }\n    interact() {\n        var _a, _b;\n        const container = this.container;\n        const options = container.options;\n        const interactivity = options.interactivity;\n        if (interactivity.events.onHover.enable && container.interactivity.status === Utils_1.Constants.mouseMoveEvent) {\n            const mousePos = container.interactivity.mouse.position;\n            if (mousePos === undefined) {\n                return;\n            }\n            const distance = container.retina.grabModeDistance;\n            const query = container.particles.quadTree.query(new Utils_1.Circle(mousePos.x, mousePos.y, distance));\n            for (const particle of query) {\n                const pos = particle.getPosition();\n                const distance = Utils_1.Utils.getDistance(pos, mousePos);\n                if (distance <= container.retina.grabModeDistance) {\n                    const grabLineOptions = interactivity.modes.grab.links;\n                    const lineOpacity = grabLineOptions.opacity;\n                    const grabDistance = container.retina.grabModeDistance;\n                    const opacityLine = lineOpacity - (distance * lineOpacity) / grabDistance;\n                    if (opacityLine > 0) {\n                        const optColor = (_a = grabLineOptions.color) !== null && _a !== void 0 ? _a : particle.particlesOptions.links.color;\n                        if (!container.particles.grabLineColor) {\n                            container.particles.grabLineColor =\n                                optColor === Utils_1.Constants.randomColorValue ||\n                                    ((_b = optColor) === null || _b === void 0 ? void 0 : _b.value) === Utils_1.Constants.randomColorValue\n                                    ? Utils_1.Constants.randomColorValue\n                                    : Utils_1.ColorUtils.colorToRgb(optColor);\n                        }\n                        let colorLine;\n                        if (container.particles.grabLineColor === Utils_1.Constants.randomColorValue) {\n                            colorLine = Utils_1.ColorUtils.getRandomRgbColor();\n                        }\n                        else {\n                            colorLine = container.particles.grabLineColor;\n                        }\n                        if (colorLine === undefined) {\n                            return;\n                        }\n                        container.canvas.drawGrabLine(particle, colorLine, opacityLine, mousePos);\n                    }\n                }\n            }\n        }\n    }\n}\nexports.Grabber = Grabber;\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/tsparticles/dist/Core/Particle/Interactions/Mouse/Grabber.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/tsparticles/dist/Core/Particle/Interactions/Mouse/Grabber.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/tsparticles/dist/Core/Particle/Interactions/Mouse/Grabber.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/tsparticles/dist/Core/Particle/Interactions/Mouse/Grabber.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/tsparticles/dist/Core/Particle/Interactions/Mouse/Grabber.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/tsparticles/dist/Core/Particle/Interactions/Mouse/Grabber.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/tsparticles/dist/Core/Particle/Interactions/Mouse/Grabber.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/tsparticles/dist/Core/Particle/Interactions/Mouse/Grabber.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/tsparticles/dist/Core/Particle/Interactions/Mouse/Grabber.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/tsparticles/dist/Core/Particle/Interactions/Mouse/Grabber.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/tsparticles/dist/Core/Particle/Interactions/Mouse/Grabber.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/tsparticles/dist/Core/Particle/Interactions/Mouse/Grabber.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/tsparticles/dist/Core/Particle/Interactions/Mouse/Grabber.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/tsparticles/dist/Core/Particle/Interactions/Mouse/Grabber.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/tsparticles/dist/Core/Particle/Interactions/Mouse/Grabber.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/tsparticles/dist/Core/Particle/Interactions/Mouse/Grabber.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/tsparticles/dist/Core/Particle/Interactions/Mouse/Grabber.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/tsparticles/dist/Core/Particle/Interactions/Mouse/Grabber.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/tsparticles/dist/Core/Particle/Interactions/Mouse/Grabber.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/tsparticles/dist/Core/Particle/Interactions/Mouse/Grabber.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/tsparticles/dist/Core/Particle/Interactions/Mouse/Grabber.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/tsparticles/dist/Core/Particle/Interactions/Mouse/Grabber.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/tsparticles/dist/Core/Particle/Interactions/Mouse/Grabber.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/tsparticles/dist/Core/Particle/Interactions/Mouse/Grabber.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/tsparticles/dist/Core/Particle/Interactions/Mouse/Grabber.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/tsparticles/dist/Core/Particle/Interactions/Mouse/Grabber.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/tsparticles/dist/Core/Particle/Interactions/Mouse/Grabber.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/tsparticles/dist/Core/Particle/Interactions/Mouse/Grabber.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/tsparticles/dist/Core/Particle/Interactions/Mouse/Grabber.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/tsparticles/dist/Core/Particle/Interactions/Mouse/Grabber.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/tsparticles/dist/Core/Particle/Interactions/Mouse/Grabber.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/tsparticles/dist/Core/Particle/Interactions/Mouse/Grabber.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/tsparticles/dist/Core/Particle/Interactions/Mouse/Grabber.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/tsparticles/dist/Core/Particle/Interactions/Mouse/Grabber.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/tsparticles/dist/Core/Particle/Interactions/Mouse/Grabber.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/tsparticles/dist/Core/Particle/Interactions/Mouse/Grabber.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/tsparticles/dist/Core/Particle/Interactions/Mouse/Grabber.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/tsparticles/dist/Core/Particle/Interactions/Mouse/Grabber.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/tsparticles/dist/Core/Particle/Interactions/Mouse/Grabber.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/tsparticles/dist/Core/Particle/Interactions/Mouse/Grabber.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/tsparticles/dist/Core/Particle/Interactions/Mouse/Grabber.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/tsparticles/dist/Core/Particle/Interactions/Mouse/Grabber.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/tsparticles/dist/Core/Particle/Interactions/Mouse/Grabber.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/tsparticles/dist/Core/Particle/Interactions/Mouse/Grabber.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/tsparticles/dist/Core/Particle/Interactions/Mouse/Grabber.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/tsparticles/dist/Core/Particle/Interactions/Mouse/Grabber.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/tsparticles/dist/Core/Particle/Interactions/Mouse/Grabber.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/tsparticles/dist/Core/Particle/Interactions/Mouse/Grabber.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/tsparticles/dist/Core/Particle/Interactions/Mouse/Grabber.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/tsparticles/dist/Core/Particle/Interactions/Mouse/Grabber.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/tsparticles/dist/Core/Particle/Interactions/Mouse/Grabber.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/tsparticles/dist/Core/Particle/Interactions/Mouse/Grabber.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/tsparticles/dist/Core/Particle/Interactions/Mouse/Grabber.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/tsparticles/dist/Core/Particle/Interactions/Mouse/Grabber.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/tsparticles/dist/Core/Particle/Interactions/Mouse/Grabber.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/tsparticles/dist/Core/Particle/Interactions/Mouse/Grabber.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/tsparticles/dist/Core/Particle/Interactions/Mouse/Grabber.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/tsparticles/dist/Core/Particle/Interactions/Mouse/Grabber.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/tsparticles/dist/Core/Particle/Interactions/Mouse/Grabber.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/tsparticles/dist/Core/Particle/Interactions/Mouse/Grabber.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/tsparticles/dist/Core/Particle/Interactions/Mouse/Grabber.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/tsparticles/dist/Core/Particle/Interactions/Mouse/Grabber.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/tsparticles/dist/Core/Particle/Interactions/Mouse/Grabber.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/tsparticles/dist/Core/Particle/Interactions/Mouse/Grabber.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/tsparticles/dist/Core/Particle/Interactions/Mouse/Grabber.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/tsparticles/dist/Core/Particle/Interactions/Mouse/Grabber.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/tsparticles/dist/Core/Particle/Interactions/Mouse/Grabber.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/tsparticles/dist/Core/Particle/Interactions/Mouse/Grabber.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/tsparticles/dist/Core/Particle/Interactions/Mouse/Grabber.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}}],"sources":{"node_modules/tsparticles/dist/Core/Particle/Interactions/Mouse/Grabber.js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Grabber = void 0;\nconst Utils_1 = require(\"../../../../Utils\");\nconst Modes_1 = require(\"../../../../Enums/Modes\");\nclass Grabber {\n    constructor(container) {\n        this.container = container;\n    }\n    isEnabled() {\n        const container = this.container;\n        const mouse = container.interactivity.mouse;\n        const events = container.options.interactivity.events;\n        if (!(events.onHover.enable && mouse.position)) {\n            return false;\n        }\n        const hoverMode = events.onHover.mode;\n        return Utils_1.Utils.isInArray(Modes_1.HoverMode.grab, hoverMode);\n    }\n    reset() {\n    }\n    interact() {\n        var _a, _b;\n        const container = this.container;\n        const options = container.options;\n        const interactivity = options.interactivity;\n        if (interactivity.events.onHover.enable && container.interactivity.status === Utils_1.Constants.mouseMoveEvent) {\n            const mousePos = container.interactivity.mouse.position;\n            if (mousePos === undefined) {\n                return;\n            }\n            const distance = container.retina.grabModeDistance;\n            const query = container.particles.quadTree.query(new Utils_1.Circle(mousePos.x, mousePos.y, distance));\n            for (const particle of query) {\n                const pos = particle.getPosition();\n                const distance = Utils_1.Utils.getDistance(pos, mousePos);\n                if (distance <= container.retina.grabModeDistance) {\n                    const grabLineOptions = interactivity.modes.grab.links;\n                    const lineOpacity = grabLineOptions.opacity;\n                    const grabDistance = container.retina.grabModeDistance;\n                    const opacityLine = lineOpacity - (distance * lineOpacity) / grabDistance;\n                    if (opacityLine > 0) {\n                        const optColor = (_a = grabLineOptions.color) !== null && _a !== void 0 ? _a : particle.particlesOptions.links.color;\n                        if (!container.particles.grabLineColor) {\n                            container.particles.grabLineColor =\n                                optColor === Utils_1.Constants.randomColorValue ||\n                                    ((_b = optColor) === null || _b === void 0 ? void 0 : _b.value) === Utils_1.Constants.randomColorValue\n                                    ? Utils_1.Constants.randomColorValue\n                                    : Utils_1.ColorUtils.colorToRgb(optColor);\n                        }\n                        let colorLine;\n                        if (container.particles.grabLineColor === Utils_1.Constants.randomColorValue) {\n                            colorLine = Utils_1.ColorUtils.getRandomRgbColor();\n                        }\n                        else {\n                            colorLine = container.particles.grabLineColor;\n                        }\n                        if (colorLine === undefined) {\n                            return;\n                        }\n                        container.canvas.drawGrabLine(particle, colorLine, opacityLine, mousePos);\n                    }\n                }\n            }\n        }\n    }\n}\nexports.Grabber = Grabber;\n"},"lineCount":69}},"error":null,"hash":"9680351a92aa63f99cec33a636c88220","cacheData":{"env":{}}}