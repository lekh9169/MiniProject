{"id":"node_modules/tsparticles/dist/Plugins/Absorbers/AbsorberInstance.js","dependencies":[{"name":"E:\\Ment-master\\package.json","includedInParent":true,"mtime":1593073115667},{"name":"E:\\Ment-master\\.babelrc","includedInParent":true,"mtime":1592712076000},{"name":"E:\\Ment-master\\node_modules\\tsparticles\\package.json","includedInParent":true,"mtime":1593073113793},{"name":"../../Utils","loc":{"line":4,"column":24},"parent":"E:\\Ment-master\\node_modules\\tsparticles\\dist\\Plugins\\Absorbers\\AbsorberInstance.js","resolved":"E:\\Ment-master\\node_modules\\tsparticles\\dist\\Utils\\index.js"}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.AbsorberInstance = void 0;\nconst Utils_1 = require(\"../../Utils\");\nclass AbsorberInstance {\n    constructor(absorbers, container, options, position) {\n        var _a, _b;\n        this.absorbers = absorbers;\n        this.container = container;\n        this.initialPosition = position;\n        this.options = options;\n        let size = options.size.value * container.retina.pixelRatio;\n        const random = typeof options.size.random === \"boolean\" ? options.size.random : options.size.random.enable;\n        const minSize = typeof options.size.random === \"boolean\" ? 1 : options.size.random.minimumValue;\n        if (random) {\n            size = Utils_1.Utils.randomInRange(minSize, size);\n        }\n        this.opacity = this.options.opacity;\n        this.size = size * container.retina.pixelRatio;\n        this.mass = this.size * options.size.density;\n        const limit = options.size.limit;\n        this.limit = limit !== undefined ? limit * container.retina.pixelRatio : limit;\n        const color = typeof options.color === \"string\" ? { value: options.color } : options.color;\n        this.color = (_a = Utils_1.ColorUtils.colorToRgb(color)) !== null && _a !== void 0 ? _a : {\n            b: 0,\n            g: 0,\n            r: 0,\n        };\n        this.position = (_b = this.initialPosition) !== null && _b !== void 0 ? _b : this.calcPosition();\n    }\n    attract(particle) {\n        const pos = particle.getPosition();\n        const { dx, dy, distance } = Utils_1.Utils.getDistances(this.position, pos);\n        const angle = Math.atan2(dx, dy) * (180 / Math.PI);\n        const acceleration = this.mass / Math.pow(distance, 2);\n        if (distance < this.size + particle.size.value) {\n            const sizeFactor = particle.size.value * 0.033;\n            if (this.size > particle.size.value && distance < this.size - particle.size.value) {\n                particle.destroy();\n            }\n            else {\n                particle.size.value -= sizeFactor;\n                particle.velocity.horizontal += Math.sin(angle * (Math.PI / 180)) * acceleration;\n                particle.velocity.vertical += Math.cos(angle * (Math.PI / 180)) * acceleration;\n            }\n            if (this.limit === undefined || this.size < this.limit) {\n                this.size += sizeFactor;\n            }\n            this.mass += sizeFactor * this.options.size.density;\n        }\n        else {\n            particle.velocity.horizontal += Math.sin(angle * (Math.PI / 180)) * acceleration;\n            particle.velocity.vertical += Math.cos(angle * (Math.PI / 180)) * acceleration;\n        }\n    }\n    resize() {\n        const initialPosition = this.initialPosition;\n        this.position =\n            initialPosition && Utils_1.Utils.isPointInside(initialPosition, this.container.canvas.size)\n                ? initialPosition\n                : this.calcPosition();\n    }\n    draw(context) {\n        context.translate(this.position.x, this.position.y);\n        context.beginPath();\n        context.arc(0, 0, this.size, 0, Math.PI * 2, false);\n        context.closePath();\n        context.fillStyle = Utils_1.ColorUtils.getStyleFromRgb(this.color, this.opacity);\n        context.fill();\n    }\n    calcPosition() {\n        var _a;\n        const container = this.container;\n        const percentPosition = (_a = this.options.position) !== null && _a !== void 0 ? _a : {\n            x: Math.random() * 100,\n            y: Math.random() * 100,\n        };\n        return {\n            x: (percentPosition.x / 100) * container.canvas.size.width,\n            y: (percentPosition.y / 100) * container.canvas.size.height,\n        };\n    }\n}\nexports.AbsorberInstance = AbsorberInstance;\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/tsparticles/dist/Plugins/Absorbers/AbsorberInstance.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/tsparticles/dist/Plugins/Absorbers/AbsorberInstance.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/tsparticles/dist/Plugins/Absorbers/AbsorberInstance.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/tsparticles/dist/Plugins/Absorbers/AbsorberInstance.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/tsparticles/dist/Plugins/Absorbers/AbsorberInstance.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/tsparticles/dist/Plugins/Absorbers/AbsorberInstance.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/tsparticles/dist/Plugins/Absorbers/AbsorberInstance.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/tsparticles/dist/Plugins/Absorbers/AbsorberInstance.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/tsparticles/dist/Plugins/Absorbers/AbsorberInstance.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/tsparticles/dist/Plugins/Absorbers/AbsorberInstance.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/tsparticles/dist/Plugins/Absorbers/AbsorberInstance.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/tsparticles/dist/Plugins/Absorbers/AbsorberInstance.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/tsparticles/dist/Plugins/Absorbers/AbsorberInstance.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/tsparticles/dist/Plugins/Absorbers/AbsorberInstance.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/tsparticles/dist/Plugins/Absorbers/AbsorberInstance.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/tsparticles/dist/Plugins/Absorbers/AbsorberInstance.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/tsparticles/dist/Plugins/Absorbers/AbsorberInstance.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/tsparticles/dist/Plugins/Absorbers/AbsorberInstance.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/tsparticles/dist/Plugins/Absorbers/AbsorberInstance.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/tsparticles/dist/Plugins/Absorbers/AbsorberInstance.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/tsparticles/dist/Plugins/Absorbers/AbsorberInstance.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/tsparticles/dist/Plugins/Absorbers/AbsorberInstance.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/tsparticles/dist/Plugins/Absorbers/AbsorberInstance.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/tsparticles/dist/Plugins/Absorbers/AbsorberInstance.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/tsparticles/dist/Plugins/Absorbers/AbsorberInstance.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/tsparticles/dist/Plugins/Absorbers/AbsorberInstance.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/tsparticles/dist/Plugins/Absorbers/AbsorberInstance.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/tsparticles/dist/Plugins/Absorbers/AbsorberInstance.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/tsparticles/dist/Plugins/Absorbers/AbsorberInstance.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/tsparticles/dist/Plugins/Absorbers/AbsorberInstance.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/tsparticles/dist/Plugins/Absorbers/AbsorberInstance.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/tsparticles/dist/Plugins/Absorbers/AbsorberInstance.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/tsparticles/dist/Plugins/Absorbers/AbsorberInstance.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/tsparticles/dist/Plugins/Absorbers/AbsorberInstance.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/tsparticles/dist/Plugins/Absorbers/AbsorberInstance.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/tsparticles/dist/Plugins/Absorbers/AbsorberInstance.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/tsparticles/dist/Plugins/Absorbers/AbsorberInstance.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/tsparticles/dist/Plugins/Absorbers/AbsorberInstance.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/tsparticles/dist/Plugins/Absorbers/AbsorberInstance.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/tsparticles/dist/Plugins/Absorbers/AbsorberInstance.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/tsparticles/dist/Plugins/Absorbers/AbsorberInstance.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/tsparticles/dist/Plugins/Absorbers/AbsorberInstance.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/tsparticles/dist/Plugins/Absorbers/AbsorberInstance.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/tsparticles/dist/Plugins/Absorbers/AbsorberInstance.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/tsparticles/dist/Plugins/Absorbers/AbsorberInstance.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/tsparticles/dist/Plugins/Absorbers/AbsorberInstance.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/tsparticles/dist/Plugins/Absorbers/AbsorberInstance.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/tsparticles/dist/Plugins/Absorbers/AbsorberInstance.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/tsparticles/dist/Plugins/Absorbers/AbsorberInstance.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/tsparticles/dist/Plugins/Absorbers/AbsorberInstance.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/tsparticles/dist/Plugins/Absorbers/AbsorberInstance.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/tsparticles/dist/Plugins/Absorbers/AbsorberInstance.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/tsparticles/dist/Plugins/Absorbers/AbsorberInstance.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/tsparticles/dist/Plugins/Absorbers/AbsorberInstance.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/tsparticles/dist/Plugins/Absorbers/AbsorberInstance.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/tsparticles/dist/Plugins/Absorbers/AbsorberInstance.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/tsparticles/dist/Plugins/Absorbers/AbsorberInstance.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/tsparticles/dist/Plugins/Absorbers/AbsorberInstance.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/tsparticles/dist/Plugins/Absorbers/AbsorberInstance.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/tsparticles/dist/Plugins/Absorbers/AbsorberInstance.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/tsparticles/dist/Plugins/Absorbers/AbsorberInstance.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/tsparticles/dist/Plugins/Absorbers/AbsorberInstance.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/tsparticles/dist/Plugins/Absorbers/AbsorberInstance.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/tsparticles/dist/Plugins/Absorbers/AbsorberInstance.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/tsparticles/dist/Plugins/Absorbers/AbsorberInstance.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/tsparticles/dist/Plugins/Absorbers/AbsorberInstance.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/tsparticles/dist/Plugins/Absorbers/AbsorberInstance.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/tsparticles/dist/Plugins/Absorbers/AbsorberInstance.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/tsparticles/dist/Plugins/Absorbers/AbsorberInstance.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/tsparticles/dist/Plugins/Absorbers/AbsorberInstance.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/tsparticles/dist/Plugins/Absorbers/AbsorberInstance.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/tsparticles/dist/Plugins/Absorbers/AbsorberInstance.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/tsparticles/dist/Plugins/Absorbers/AbsorberInstance.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/tsparticles/dist/Plugins/Absorbers/AbsorberInstance.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/tsparticles/dist/Plugins/Absorbers/AbsorberInstance.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/tsparticles/dist/Plugins/Absorbers/AbsorberInstance.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/tsparticles/dist/Plugins/Absorbers/AbsorberInstance.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/tsparticles/dist/Plugins/Absorbers/AbsorberInstance.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/tsparticles/dist/Plugins/Absorbers/AbsorberInstance.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/tsparticles/dist/Plugins/Absorbers/AbsorberInstance.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/tsparticles/dist/Plugins/Absorbers/AbsorberInstance.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/tsparticles/dist/Plugins/Absorbers/AbsorberInstance.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/tsparticles/dist/Plugins/Absorbers/AbsorberInstance.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/tsparticles/dist/Plugins/Absorbers/AbsorberInstance.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/tsparticles/dist/Plugins/Absorbers/AbsorberInstance.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}}],"sources":{"node_modules/tsparticles/dist/Plugins/Absorbers/AbsorberInstance.js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.AbsorberInstance = void 0;\nconst Utils_1 = require(\"../../Utils\");\nclass AbsorberInstance {\n    constructor(absorbers, container, options, position) {\n        var _a, _b;\n        this.absorbers = absorbers;\n        this.container = container;\n        this.initialPosition = position;\n        this.options = options;\n        let size = options.size.value * container.retina.pixelRatio;\n        const random = typeof options.size.random === \"boolean\" ? options.size.random : options.size.random.enable;\n        const minSize = typeof options.size.random === \"boolean\" ? 1 : options.size.random.minimumValue;\n        if (random) {\n            size = Utils_1.Utils.randomInRange(minSize, size);\n        }\n        this.opacity = this.options.opacity;\n        this.size = size * container.retina.pixelRatio;\n        this.mass = this.size * options.size.density;\n        const limit = options.size.limit;\n        this.limit = limit !== undefined ? limit * container.retina.pixelRatio : limit;\n        const color = typeof options.color === \"string\" ? { value: options.color } : options.color;\n        this.color = (_a = Utils_1.ColorUtils.colorToRgb(color)) !== null && _a !== void 0 ? _a : {\n            b: 0,\n            g: 0,\n            r: 0,\n        };\n        this.position = (_b = this.initialPosition) !== null && _b !== void 0 ? _b : this.calcPosition();\n    }\n    attract(particle) {\n        const pos = particle.getPosition();\n        const { dx, dy, distance } = Utils_1.Utils.getDistances(this.position, pos);\n        const angle = Math.atan2(dx, dy) * (180 / Math.PI);\n        const acceleration = this.mass / Math.pow(distance, 2);\n        if (distance < this.size + particle.size.value) {\n            const sizeFactor = particle.size.value * 0.033;\n            if (this.size > particle.size.value && distance < this.size - particle.size.value) {\n                particle.destroy();\n            }\n            else {\n                particle.size.value -= sizeFactor;\n                particle.velocity.horizontal += Math.sin(angle * (Math.PI / 180)) * acceleration;\n                particle.velocity.vertical += Math.cos(angle * (Math.PI / 180)) * acceleration;\n            }\n            if (this.limit === undefined || this.size < this.limit) {\n                this.size += sizeFactor;\n            }\n            this.mass += sizeFactor * this.options.size.density;\n        }\n        else {\n            particle.velocity.horizontal += Math.sin(angle * (Math.PI / 180)) * acceleration;\n            particle.velocity.vertical += Math.cos(angle * (Math.PI / 180)) * acceleration;\n        }\n    }\n    resize() {\n        const initialPosition = this.initialPosition;\n        this.position =\n            initialPosition && Utils_1.Utils.isPointInside(initialPosition, this.container.canvas.size)\n                ? initialPosition\n                : this.calcPosition();\n    }\n    draw(context) {\n        context.translate(this.position.x, this.position.y);\n        context.beginPath();\n        context.arc(0, 0, this.size, 0, Math.PI * 2, false);\n        context.closePath();\n        context.fillStyle = Utils_1.ColorUtils.getStyleFromRgb(this.color, this.opacity);\n        context.fill();\n    }\n    calcPosition() {\n        var _a;\n        const container = this.container;\n        const percentPosition = (_a = this.options.position) !== null && _a !== void 0 ? _a : {\n            x: Math.random() * 100,\n            y: Math.random() * 100,\n        };\n        return {\n            x: (percentPosition.x / 100) * container.canvas.size.width,\n            y: (percentPosition.y / 100) * container.canvas.size.height,\n        };\n    }\n}\nexports.AbsorberInstance = AbsorberInstance;\n"},"lineCount":85}},"error":null,"hash":"5778e1ac1f2a31acabb3d291846d1502","cacheData":{"env":{}}}